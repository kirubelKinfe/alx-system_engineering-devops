# Secured and Monitored Web Infrastructure

## Textual Visualization Diagram

```
[User] --> [Internet] --> [DNS Resolver]
                             |
                             v
[www.foobar.com (HTTPS)] --> [Load Balancer (HAproxy, SSL Termination)]
                             |
                             v
                +-------------------------+
                |                         |
                v                         v
[Server 1]                           [Server 2]
  ├── Firewall                      ├── Firewall
  ├── Nginx (Web Server)            ├── Nginx (Web Server)
  ├── Application Server            ├── Application Server
  ├── Application Files             ├── Application Files
  ├── MySQL (Primary)               ├── MySQL (Replica)
  └── Monitoring Client             └── Monitoring Client
                             |
                             v
                         [Server 3]
                           ├── Firewall
                           ├── Nginx (Web Server)
                           ├── Application Server
                           ├── Application Files
                           └── Monitoring Client
```

## Explanations

### Components and Why They Are Added
1. **3 Firewalls**:
   - **Purpose**: Firewalls are added to each server to control incoming and outgoing network traffic based on security rules, protecting against unauthorized access, attacks (e.g., DDoS), and vulnerabilities.
   - **Why Added**: Enhances security by filtering traffic, allowing only legitimate requests (e.g., HTTP/HTTPS on port 443) to reach the servers.
2. **1 SSL Certificate**:
   - **Purpose**: Enables HTTPS for `www.foobar.com`, encrypting traffic between the user and the load balancer.
   - **Why Added**: Ensures data confidentiality, integrity, and authenticity, protecting sensitive information (e.g., user credentials) from interception.
3. **3 Monitoring Clients**:
   - **Purpose**: Data collectors (e.g., Sumo Logic agents) installed on each server to gather performance metrics, logs, and system health data.
   - **Why Added**: Enables real-time monitoring to detect issues, track performance, and ensure the infrastructure operates reliably.

### Additional Specifics
1. **What Are Firewalls For**:
   - Firewalls act as a barrier between the server and external networks, enforcing security policies by allowing or blocking traffic based on rules (e.g., allowing port 443 for HTTPS, blocking unauthorized ports).
2. **Why Traffic Is Served Over HTTPS**:
   - HTTPS (via SSL certificate) encrypts communication between the user and the load balancer, preventing eavesdropping, tampering, or man-in-the-middle attacks. It also builds user trust by ensuring data security.
3. **What Monitoring Is Used For**:
   - Monitoring tracks server health, performance metrics (e.g., CPU, memory, disk usage), application errors, and traffic patterns. It helps identify issues (e.g., downtime, high latency) and supports proactive maintenance.
4. **How the Monitoring Tool Collects Data**:
   - Monitoring clients (e.g., Sumo Logic agents) run on each server, collecting logs (e.g., Nginx access/error logs, MySQL logs), system metrics, and application performance data. They send this data to a central monitoring service (e.g., Sumo Logic) via secure protocols (e.g., HTTPS) for analysis and visualization.
5. **Monitoring Web Server QPS (Queries Per Second)**:
   - To monitor QPS:
     - Configure the monitoring client to parse Nginx access logs, counting requests per second.
     - Use a tool like Sumo Logic to aggregate and visualize request rates.
     - Alternatively, enable Nginx status module (`stub_status`) to expose metrics (e.g., active connections, requests) and configure the monitoring client to scrape these metrics periodically.
     - Set up dashboards and alerts to track QPS trends and detect anomalies (e.g., sudden spikes).

### Issues with the Infrastructure
1. **Terminating SSL at the Load Balancer**:
   - **Issue**: SSL termination at the load balancer means traffic between the load balancer and servers is unencrypted (HTTP). This exposes data to potential interception if the internal network is compromised.
   - **Impact**: Sensitive data (e.g., user sessions) could be vulnerable within the infrastructure.
2. **Only One MySQL Server Accepting Writes**:
   - **Issue**: The Primary MySQL node handles all write operations, creating a bottleneck and SPOF for writes. If the Primary fails, write operations stop until a new Primary is promoted.
   - **Impact**: Limits scalability for write-heavy applications and risks downtime during Primary node failure.
3. **Servers with Identical Components**:
   - **Issue**: Each server runs Nginx, the application server, and application files, leading to resource contention and inefficiency. For example, database and web server processes compete for CPU/memory.
   - **Impact**: Reduces performance, complicates scaling (e.g., scaling database independently), and increases maintenance complexity.

## Screenshot
- **Whiteboard Diagram Screenshot**: https://excalidraw.com/#json=-ug0mE_8W4Hmf9-HAdZxj,Me-YVTBeiS4boSJujvezLg

## Repository Information
- **GitHub Repository**: alx-system_engineering-devops
- **Directory**: 0x09-web_infrastructure_design
- **File**: 2-secured_and_monitored_web_infrastructure